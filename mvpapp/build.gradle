buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.3.0'
  }
}
apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: "sonar-runner"

repositories {
  mavenCentral()
}

android {
  compileSdkVersion 23
  buildToolsVersion "23.0.1"

  defaultConfig {
    minSdkVersion 8
    targetSdkVersion 23
    versionCode 1
    versionName "1.0"
  }

  lintOptions {
    abortOnError = true
    lintConfig file("src/main/lint.xml")
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile 'com.android.support:appcompat-v7:23.0.1'
  compile 'com.android.support:support-v4:23.0.1'
  compile 'javax.inject:javax.inject:1@jar'
  provided 'com.squareup.dagger:dagger-compiler:1.2.+'
  compile 'com.squareup.dagger:dagger:1.2.+'
  compile 'com.jakewharton:butterknife:5.1.+'
  compile 'com.github.pedrovgs:renderers:1.1.+'
  compile 'com.squareup.picasso:picasso:2.3.+'
  compile 'com.github.pedrovgs:draggablepanel:1.+'
}

sonarRunner {
  sonarProperties {
    property "sonar.projectKey", "EffectiveAndroidUI"
    property "sonar.projectName", "EffectiveAndroidUI"
    property "sonar.projectVersion", "1.0"
    property "sonar.language", "java"
    property "sonar.sources", "src/main/java"
    property "sonar.binaries", "build"
  }
}

task checkstyle(type: Checkstyle) {
  configFile file('../config/checkstyle/checkstyle.xml')
  source 'src/main/java'
  include '**/*.java'
  exclude '**/gen/**'

  classpath = files()
}

task pmd(type: Pmd) {
  ignoreFailures = false
  ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
  ruleSets = []

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = false
    html.enabled = true
    xml {
      destination "$project.buildDir/reports/pmd/pmd.xml"
    }
    html {
      destination "$project.buildDir/reports/pmd/pmd.html"
    }
  }
}

task findbugs(type: FindBugs) {
  ignoreFailures = false
  effort = "max"
  excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-excludes.xml")
  classes = files("${project.rootDir}/app/build/intermediates/classes")

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = false
    html.enabled = true
    xml {
      destination "$project.buildDir/reports/findbugs/findbugs.xml"
    }
    html {
      destination "$project.buildDir/reports/findbugs/findbugs.html"
    }
  }

  classpath = files()
}